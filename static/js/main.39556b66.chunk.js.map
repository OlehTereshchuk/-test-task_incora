{"version":3,"sources":["api/usersAPI.js","store/usersReducer.js","api/postsAPI.js","store/postsReducer.js","api/commentsAPI.js","store/commentsReducer.js","store/store.js","components/User.js","components/UsersPage.js","components/Form.js","components/PostsPage.js","components/CommentsList.js","components/Post.js","index.js"],"names":["loadUsersFromServer","a","async","fetch","response","json","setUsers","users","type","usersReducer","action","loadPostsFromServer","URL","loadPostFromServer","addNewPost","userId","title","body","method","JSON","stringify","headers","putPostRequest","id","deletePostRequest","setPosts","posts","setCurrentPost","post","editPost","initialValue","currentPost","postsReducer","state","map","filter","loadCommentsFromServer","setComments","comments","commentsReducer","rootReducer","combineReducers","postsInfo","getUsers","getPosts","getCurrentPost","getComments","store","createStore","applyMiddleware","thunk","User","userData","columns","column","key","className","to","mapMethodsToProps","dispatch","connect","useEffect","user","addPost","newPost","setIsFormVisible","useState","inputValue","setInputValue","textareaValue","setTextareaValue","onSubmit","event","preventDefault","trim","htmlFor","onChange","target","value","required","postId","newBody","deletePost","isFormVisible","isEditWindowVisible","setIsEditWindowVisible","location","useLocation","searchParams","URLSearchParams","search","get","popupButtonValue","handleTextareachange","cn","onClick","handleSubmit","defaultValue","src","alt","handleEditClick","CommentsList","comment","name","email","URL_GET_COMMENTS","URL_GET_POST","length","ReactDOM","render","activeClassName","path","component","UsersPage","PostsPage","Post","document","getElementById"],"mappings":"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","file":"static/js/main.39556b66.chunk.js","sourcesContent":["const URL = 'https://jsonplaceholder.typicode.com/users';\n\nexport const loadUsersFromServer = async() => {\n  const response = await fetch(URL);\n\n  return response.json();\n};\n","import { loadUsersFromServer } from '../api/usersAPI';\n\nconst SET_USERS = 'SET_USERS';\n\nconst setUsers = users => ({\n  type: SET_USERS,\n  users,\n});\n\nexport const loadUsers = () => async(dispatch) => {\n  const users = await loadUsersFromServer();\n\n  dispatch(setUsers(users));\n};\n\nconst usersReducer = (users = [], action) => {\n  switch (action.type) {\n    case SET_USERS:\n      return action.users;\n    default:\n      return users;\n  }\n};\n\nexport default usersReducer;\n","export const loadPostsFromServer = async(URL) => {\n  const response = await fetch(URL);\n\n  return response.json();\n};\n\nexport const loadPostFromServer = async(URL) => {\n  const response = await fetch(URL);\n\n  return response.json();\n};\n\nexport const addNewPost = async(userId, title, body) => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\n    method: 'POST',\n    body: JSON.stringify({\n      userId,\n      title,\n      body,\n    }),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n\n  return response.json();\n};\n\nexport const putPostRequest = async(id, body) => {\n  const URL = `https://jsonplaceholder.typicode.com/posts/${id}`;\n  const response = await fetch(URL, {\n    method: 'PUT',\n    body: JSON.stringify({\n      body,\n    }),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n\n  return response.json();\n};\n\nexport const deletePostRequest = async(id) => {\n  const URL = `https://jsonplaceholder.typicode.com/posts/${id}`;\n  const response = await fetch(URL, {\n    method: 'DELETE',\n  });\n\n  return response.json();\n};\n","import {\n  loadPostsFromServer, loadPostFromServer, addNewPost, putPostRequest, deletePostRequest,\n} from '../api/postsAPI';\n\nconst SET_POSTS = 'SET_POSTS';\nconst SET_CURRENT_POST = 'SET_CURRENT_POST';\nconst ADD_POST = 'ADD_POST';\nconst EDIT_POST = 'EDIT_POST';\nconst DELETE_POST = 'DELETE_POST';\n\nconst setPosts = posts => ({\n  type: SET_POSTS,\n  posts,\n});\nconst setCurrentPost = post => ({\n  type: SET_CURRENT_POST,\n  post,\n});\nconst addPost = post => ({\n  type: ADD_POST,\n  post,\n});\nconst editPost = (id, body) => ({\n  type: EDIT_POST,\n  id,\n  body,\n});\nconst deletePost = id => ({\n  type: DELETE_POST,\n  id,\n});\n\nexport const loadPosts = URL => async(dispatch) => {\n  const posts = await loadPostsFromServer(URL);\n\n  dispatch(setPosts(posts));\n};\n\nexport const loadPost = URL => async(dispatch) => {\n  const post = await loadPostFromServer(URL);\n\n  dispatch(setCurrentPost(post));\n};\n\nexport const AddPost = (userId, title, body) => async(dispatch) => {\n  const newPost = await addNewPost(userId, title, body);\n\n  dispatch(addPost(newPost));\n};\n\nexport const EditPost = (postId, newBody) => async(dispatch) => {\n  const { id, body } = await putPostRequest(postId, newBody);\n\n  dispatch(editPost(id, body));\n};\n\nexport const DeletePost = postId => async(dispatch) => {\n  const response = await deletePostRequest(postId);\n\n  if (response) {\n    dispatch(deletePost(postId));\n  }\n};\n\nconst initialValue = {\n  posts: [],\n  currentPost: {},\n};\n\nconst postsReducer = (state = initialValue, action) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return {\n        ...state,\n        posts: action.posts,\n      };\n    case SET_CURRENT_POST:\n      return {\n        ...state,\n        currentPost: action.post,\n      };\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [action.post, ...state.posts],\n      };\n    case EDIT_POST:\n      return {\n        ...state,\n        posts: [...state.posts.map(\n          (post) => {\n            if (post.id === action.id) {\n              return {\n                ...post,\n                body: action.body,\n              };\n            }\n\n            return post;\n          },\n        )],\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: [...state.posts.filter(post => post.id !== action.id)],\n      };\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;\n","export const loadCommentsFromServer = async(URL) => {\n  const response = await fetch(URL);\n\n  return response.json();\n};\n","import { loadCommentsFromServer } from '../api/commentsAPI';\n\nconst SET_COMMENTS = 'SET_COMMENTS';\n\nconst setComments = comments => ({\n  type: SET_COMMENTS,\n  comments,\n});\n\nexport const loadComments = URL => async(dispatch) => {\n  const comments = await loadCommentsFromServer(URL);\n\n  dispatch(setComments(comments));\n};\n\nconst commentsReducer = (comments = [], action) => {\n  switch (action.type) {\n    case SET_COMMENTS:\n      return action.comments;\n    default:\n      return comments;\n  }\n};\n\nexport default commentsReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport usersReducer from './usersReducer';\nimport postsReducer from './postsReducer';\nimport commentsReducer from './commentsReducer';\n\nconst rootReducer = combineReducers({\n  users: usersReducer,\n  postsInfo: postsReducer,\n  comments: commentsReducer,\n});\n\nexport const getUsers = state => state.users;\nexport const getPosts = state => state.postsInfo.posts;\nexport const getCurrentPost = state => state.postsInfo.currentPost;\nexport const getComments = state => state.comments;\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\n\nconst User = ({ userData, columns }) => (\n  <tr>\n    {columns.map((column) => {\n      if (column === 'posts') {\n        return (\n          <td key={column} className=\"table__body-item\">\n            <NavLink\n              to={`/posts?userId=${userData.id}`}\n              className=\"table__body-link\"\n            >\n                Details\n            </NavLink>\n          </td>\n        );\n      }\n\n      return (\n        <td className=\"table__body-item\" key={column}>{userData[column]}</td>\n      );\n    })}\n  </tr>\n);\n\nUser.propTypes = {\n  userData: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    username: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n  }).isRequired,\n  columns: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default User;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getUsers } from '../store/store';\nimport { loadUsers } from '../store/usersReducer';\nimport User from './User';\n\nconst UsersPage = ({ users, loadUsersFromServer }) => {\n  const columns = ['id', 'name', 'username', 'email', 'posts'];\n\n  useEffect(() => {\n    loadUsersFromServer();\n  }, [loadUsersFromServer]);\n\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          {columns.map(column => (\n            <th key={column} className=\"table__head-item\">{column}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {users.map(user => (\n          <User\n            key={user.id}\n            columns={columns}\n            userData={user}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst mapStateToProps = state => ({\n  users: getUsers(state),\n});\n\nconst mapMethodsToProps = {\n  loadUsersFromServer: loadUsers,\n};\n\nUsersPage.propTypes = {\n  users: PropTypes.arrayOf(PropTypes.object).isRequired,\n  loadUsersFromServer: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapMethodsToProps)(UsersPage);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { AddPost } from '../store/postsReducer';\n\nconst Form = ({ userId, setIsFormVisible, addPost }) => {\n  const [inputValue, setInputValue] = useState('');\n  const [textareaValue, setTextareaValue] = useState('');\n\n  const handleInputChange = ({ target }) => {\n    setInputValue(target.value);\n  };\n\n  const handleTextareChange = ({ target }) => {\n    setTextareaValue(target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (inputValue.trim() !== '' && textareaValue.trim() !== '') {\n      addPost(userId, inputValue, textareaValue);\n      setIsFormVisible(false);\n    }\n  };\n\n  return (\n    <form className=\"form\" onSubmit={handleSubmit}>\n      <label htmlFor=\"title\" className=\"form__label\">\nTitle:\n        <input\n          type=\"text\"\n          id=\"title\"\n          className=\"form__title\"\n          onChange={handleInputChange}\n          value={inputValue}\n          required\n        />\n      </label>\n      <label htmlFor=\"body\" className=\"form__label\">\nBody:\n        <textarea\n          type=\"text\"\n          id=\"body\"\n          className=\"form__textarea\"\n          onChange={handleTextareChange}\n          value={textareaValue}\n          required\n        />\n      </label>\n      <input type=\"submit\" value=\"Add  post\" className=\"form__submit\" />\n    </form>\n  );\n};\n\nForm.propTypes = {\n  userId: PropTypes.string.isRequired,\n  setIsFormVisible: PropTypes.func.isRequired,\n  addPost: PropTypes.func.isRequired,\n};\n\nexport default connect(null, { addPost: AddPost })(Form);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\nimport { connect } from 'react-redux';\nimport { useLocation } from 'react-router';\nimport Form from './Form';\nimport { getPosts } from '../store/store';\nimport { loadPosts, EditPost, DeletePost } from '../store/postsReducer';\n\nconst PostsPage = ({ posts, loadPostsFromServer, editPost, deletePost }) => {\n  const [isFormVisible, setIsFormVisible] = useState(false);\n  const [isEditWindowVisible, setIsEditWindowVisible] = useState(null);\n  const [textareaValue, setTextareaValue] = useState('');\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const URL = `https://jsonplaceholder.typicode.com/posts${location.search}`;\n\n  const userId = searchParams.get('userId');\n  const popupButtonValue = isFormVisible ? 'Close' : 'Add new post';\n\n  const handleButtonClick = () => {\n    setIsFormVisible(!isFormVisible);\n  };\n\n  const handleEditClick = (id) => {\n    setTextareaValue('');\n\n    if (isEditWindowVisible !== id) {\n      setIsEditWindowVisible(id);\n    } else {\n      setIsEditWindowVisible(null);\n    }\n  };\n\n  const handleTextareachange = ({ target }) => {\n    setTextareaValue(target.value);\n  };\n\n  const handleSubmit = (id, event) => {\n    event.preventDefault();\n    if (textareaValue !== '') {\n      editPost(id, textareaValue);\n      setIsEditWindowVisible(null);\n    }\n  };\n\n  useEffect(() => {\n    loadPostsFromServer(URL);\n  }, [loadPostsFromServer, URL]);\n\n  return (\n    <>\n      <button\n        className={cn('popup-button', {\n          'popup-button--close': isFormVisible,\n        })}\n        type=\"button\"\n        onClick={handleButtonClick}\n      >\n        {popupButtonValue}\n      </button>\n\n      {isFormVisible && (\n        <Form userId={userId} setIsFormVisible={setIsFormVisible} />\n      )}\n\n      {posts.map(({ id, title, body }) => (\n        <section key={id} className=\"post shadow\">\n          <h2 className=\"post__title\">{title}</h2>\n          <p>{body}</p>\n          {isEditWindowVisible === id\n            && (\n              <form className=\"post__edit-form\" onSubmit={event => handleSubmit(id, event)}>\n                <button\n                  onClick={() => setIsEditWindowVisible(null)}\n                  type=\"button\"\n                  className=\"post__edit-close\"\n                >\n                  X\n                </button>\n                <label htmlFor=\"textarea\">\nBody:\n                  <textarea\n                    id=\"textarea\"\n                    onChange={handleTextareachange}\n                    className=\"post__edit-textarea\"\n                    defaultValue={body}\n                  />\n                </label>\n                <input type=\"submit\" className=\"post__edit-submit\" value=\"Edit\" />\n              </form>\n            )\n          }\n\n          <NavLink\n            to={`/comments?postId=${id}`}\n            className=\"post__link\"\n          >\n            All information\n          </NavLink>\n\n          <img\n            src=\"/-test-task_incora/images/edit.svg\"\n            alt=\"edit icon\"\n            className=\"post__icon post__icon--edit\"\n            onClick={() => handleEditClick(id)}\n          />\n          <img\n            src=\"/-test-task_incora/images/delete.svg\"\n            alt=\"delete icon\"\n            className=\"post__icon post__icon--delete\"\n            onClick={() => deletePost(id)}\n          />\n        </section>\n      ))}\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  posts: getPosts(state),\n});\n\nconst mapMethodsToProps = {\n  loadPostsFromServer: loadPosts,\n  editPost: EditPost,\n  deletePost: DeletePost,\n};\n\nPostsPage.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  loadPostsFromServer: PropTypes.func.isRequired,\n  editPost: PropTypes.func.isRequired,\n  deletePost: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapMethodsToProps)(PostsPage);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CommentsList = ({ comments }) => (\n  <article className=\"comments\">\n    <dl>\n      {comments.map(comment => (\n        <div key={comment.id}>\n          <dt className=\"comment__author\">\n            {comment.name}\n            <br />\n            {comment.email}\n          </dt>\n          <dd className=\"comment__body\">{comment.body}</dd>\n        </div>\n      ))}\n    </dl>\n  </article>\n);\n\nCommentsList.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default CommentsList;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { useLocation } from 'react-router';\nimport CommentsList from './CommentsList';\nimport { getComments, getCurrentPost } from '../store/store';\nimport { loadComments } from '../store/commentsReducer';\nimport { loadPost } from '../store/postsReducer';\n\nconst Post = ({ comments, loadCommentsFromServer, post, loadPostFromServer }) => {\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const URL_GET_COMMENTS = `https://jsonplaceholder.typicode.com/comments${location.search}`;\n\n  const postId = +searchParams.get('postId');\n  const URL_GET_POST = `https://jsonplaceholder.typicode.com/posts/${postId}`;\n\n  useEffect(() => {\n    loadPostFromServer(URL_GET_POST);\n    loadCommentsFromServer(URL_GET_COMMENTS);\n  }, [loadCommentsFromServer, URL_GET_COMMENTS, loadPostFromServer, URL_GET_POST]);\n\n  return (\n    <section className=\"post shadow\">\n      <h2 className=\"post__title\">{post.title}</h2>\n      <p>{post.body}</p>\n      {comments.length > 0 && (\n        <>\n          <h3 className=\"post__title\">Comments</h3>\n          <CommentsList comments={comments} />\n        </>\n      )}\n    </section>\n  );\n};\n\nconst mapStateToProps = state => ({\n  comments: getComments(state),\n  post: getCurrentPost(state),\n});\n\nconst mapMethodsToProps = {\n  loadCommentsFromServer: loadComments,\n  loadPostFromServer: loadPost,\n};\n\nPost.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n  loadCommentsFromServer: PropTypes.func.isRequired,\n  post: PropTypes.shape({\n    body: PropTypes.string,\n    title: PropTypes.string,\n  }).isRequired,\n  loadPostFromServer: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapMethodsToProps)(Post);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Route, NavLink } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport store from './store/store';\nimport './styles/index.scss';\n\nimport UsersPage from './components/UsersPage';\nimport PostsPage from './components/PostsPage';\nimport Post from './components/Post';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <NavLink\n        to=\"/users\"\n        className=\"link\"\n        activeClassName=\"link--active\"\n      >\n        Users\n      </NavLink>\n\n      <Route path=\"/users\" component={UsersPage} />\n      <Route path=\"/posts/:userId?\" component={PostsPage} />\n      <Route path=\"/comments/:postId?\" component={Post} />\n\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}